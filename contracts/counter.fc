;; read function declaration - returns int as result
(int) load_data() inline {
    ;; load the storage cell and start parsing as a slice
    var ds = get_data().begin_parse();
    ;; read a 64 bit unsigned int from the slice and return it
    return (ds~load_uint(64));
}

;; write function declaration - takes an int as arg
() save_data(int counter) impure inline {
    ;; store the storage cell and create it with a builder
    set_data(begin_cell()
            ;; write a 64 bit unsigned int to the builder
            .store_uint(counter, 64)
            ;; convert the builder to a cell
            .end_cell());
}

;; well known function signature
() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    ;; check if incoming message is empty (with no body)
    if (in_msg_body.slice_empty?()) {
        ;; return successfully and accept an empty message
        return ();
    }
    ;; parse the operation type encoded in the beginning of msg body
    int op = in_msg_body~load_uint(32);
    ;; call our read utility function to load values from storage
    var (counter) = load_data();
    ;; handle op #1 = increment
    if (op == 1) {
        ;; call our write utility function to persist values to storage
        save_data(counter + 1);
    }
}

;; getter declaration - returns int as result
int counter() method_id {
    ;; call our read utility function to load value
    var (counter) = load_data();
    return counter;
}

